name: CI

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request: {}
  workflow_dispatch:

jobs:
  test:
    name: ${{ matrix.platform }} (${{ matrix.python-version }})
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8, 3.9, "3.10"]
        platform: [ubuntu-latest, macos-latest, windows-latest]
        backend: [pyqt5, pyside2]

    steps:
      - uses: actions/checkout@v2
      - uses: tlambert03/setup-qt-libs@v1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[testing]
          pip install ${{ matrix.backend }}

      - name: Run test
        uses: GabrielBB/xvfb-action@v1
        env:
          PLATFORM: ${{ matrix.platform }}
        with:
          run: python -m pytest --color=yes --cov=napari_error_reporter --cov-report=xml

      - name: Coverage
        uses: codecov/codecov-action@v2

  test_sha:
      name: Test sha ${{ matrix.platform }}
      runs-on: ${{ matrix.platform }}
      strategy:
        fail-fast: false
        matrix:
          python-version: ["3.10"]
          platform: [ubuntu-latest, macos-latest, windows-latest]

      steps:
        - uses: actions/checkout@v2
        - name: clone napari
          uses: actions/checkout@v2
          with:
            repository: napari/napari
            path: napari-repo
            fetch-depth: 2

        - name: Set up Python ${{ matrix.python-version }}
          uses: actions/setup-python@v2
          with:
            python-version: ${{ matrix.python-version }}

        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -e .
            pip install -e ./napari-repo

        - name: Run test
          run: python -c "from napari_error_reporter._util import try_get_git_sha; assert try_get_git_sha(); assert 'dirty' not in try_get_git_sha()"

        - name: Remove File
          uses: JesseTG/rm@v1.0.2
          with:
            path: napari-repo/resources

        - name: Run dirty test
          run: |
            python -c "from napari_error_reporter import get_release; assert 'dirty' in get_release()"


  deploy:
    name: Deploy
    needs: test
    if: "startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: install
        run: |
          git tag
          pip install --upgrade pip
          pip install -U build twine
          python -m build
          twine check dist/*
          ls -lh dist

      - name: Build and publish
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
